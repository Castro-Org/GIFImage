---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: other
workflows:
  build:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - script@1:
        title: Build macos artefact
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            swift package reset
            swift build -v
    - deploy-to-bitrise-io@2: {}
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - script@1:
        title: Run Swift Lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            swiftlint
    - script@1:
        title: Run tests
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Prepare environment
            swift package reset

            # Test macOS layer
            swift test --parallel --xunit-output "${BITRISE_DEPLOY_DIR}/swift_test.xml"

            # Test iOS layer
            xcodebuild -workspace .swiftpm/xcode/package.xcworkspace \
            -scheme GIFImage \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/.tmp" \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 8' \
            -parallel-testing-enabled \
            -enableCodeCoverage \
            -quiet \
            build-for-testing test

            # Test tvOS layer
            xcodebuild -workspace .swiftpm/xcode/package.xcworkspace \
            -scheme GIFImage \
            -derivedDataPath "${BITRISE_SOURCE_DIR}/.tmp" \
            -sdk appletvsimulator \
            -destination 'platform=tvOS Simulator,name=Apple TV' \
            -parallel-testing-enabled \
            -enableCodeCoverage \
            -quiet \
            build-for-testing test
            
            find "${BITRISE_SOURCE_DIR}/.tmp" -name "*.xcresult" -exec cp -r {} "${BITRISE_DEPLOY_DIR}" \;
            
            rm -rf "${BITRISE_SOURCE_DIR}/.tmp"
    - deploy-to-bitrise-io@2: {}
        inputs:
        - zip_name: test_result
        - is_compress: 'true'
meta:
  bitrise.io:
    stack: osx-xcode-13.3.x
trigger_map:
- push_branch: main
  workflow: build
- pull_request_source_branch: '*'
  pull_request_target_branch: main
  workflow: test
